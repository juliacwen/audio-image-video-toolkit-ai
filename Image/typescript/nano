// File: Image/typescript/crescentDemo.ts
import * as fs from "fs";
import * as path from "path";

// Define a type for detection results
interface DetectionResult {
  imageName: string;
  crescentDetected: boolean;
  confidence: number;
}

// Simulated crescent detection function
function detectCrescent(imageName: string): DetectionResult {
  const crescentDetected = Math.random() > 0.5; // simulated result
  const confidence = parseFloat((Math.random() * 100).toFixed(2));
  return { imageName, crescentDetected, confidence };
}

// Helper: read all images in a folder
function getImagesFromFolder(folderPath: string): string[] {
  return fs.readdirSync(folderPath).filter(file =>
    [".jpg", ".jpeg", ".png"].includes(path.extname(file).toLowerCase())
  );
}

// Folder paths relative to this TypeScript file
const crescentFolder = path.join(__dirname, "crescent");
const noCrescentFolder = path.join(__dirname, "no_crescent");

// Read images
const crescentImages = getImagesFromFolder(crescentFolder);
const noCrescentImages = getImagesFromFolder(noCrescentFolder);

// Combine and detect
const allImages = [
  ...crescentImages.map(img => ({ folder: "crescent", img })),
  ...noCrescentImages.map(img => ({ folder: "no_crescent", img })),
];

const results: DetectionResult[] = allImages.map(({ img }) => detectCrescent(img));

// Print results
console.log("ðŸŒ“ Crescent Detection (Simulated)");
console.table(results);

